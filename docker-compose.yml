# JobSpy Docker Compose 配置
# 提供開發、測試和生產環境的容器化解決方案

version: '3.8'

# ==================== 服務定義 ====================
services:
  
  # 開發環境
  jobspy-dev:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: jobspy-dev
    volumes:
      # 掛載專案目錄以支援即時開發
      - .:/app
      # 掛載 pip 快取以加速安裝
      - pip-cache:/root/.cache/pip
      # 掛載 Jupyter 配置
      - jupyter-config:/home/jobspy/.jupyter
    ports:
      - "8888:8888"  # Jupyter Lab
      - "8000:8000"  # 開發伺服器
      - "5000:5000"  # Flask 除錯伺服器
    environment:
      - JOBSPY_DEBUG=true
      - JOBSPY_LOG_LEVEL=DEBUG
      - JOBSPY_CACHE_ENABLED=true
      - JOBSPY_MOCK_NETWORK=false
      - PYTHONPATH=/app
    networks:
      - jobspy-network
    profiles:
      - dev
    restart: unless-stopped
    stdin_open: true
    tty: true
    command: >
      bash -c "
        echo '🚀 JobSpy 開發環境啟動中...' &&
        echo '📝 可用服務:' &&
        echo '  - Jupyter Lab: http://localhost:8888' &&
        echo '  - 開發伺服器: http://localhost:8000' &&
        echo '💡 執行測試: docker-compose exec jobspy-dev python test_runner.py --quick' &&
        echo '📊 執行範例: docker-compose exec jobspy-dev python complete_async_integration_example.py' &&
        tail -f /dev/null
      "
  
  # 測試環境
  jobspy-test:
    build:
      context: .
      target: testing
      dockerfile: Dockerfile
    container_name: jobspy-test
    volumes:
      - .:/app
      - test-results:/app/test-results
    environment:
      - JOBSPY_TEST_ENV=ci
      - JOBSPY_CACHE_ENABLED=false
      - JOBSPY_MOCK_NETWORK=true
      - JOBSPY_VERBOSE=false
      - JOBSPY_TIMEOUT=60
      - JOBSPY_MAX_RETRIES=3
    networks:
      - jobspy-network
    profiles:
      - test
    command: >
      bash -c "
        echo '🧪 JobSpy 測試環境啟動中...' &&
        python test_runner.py --all --coverage --report test-results/test-report.md --json test-results/test-results.json &&
        echo '✅ 測試完成，結果保存在 test-results/ 目錄'
      "
  
  # 單元測試服務
  jobspy-unit-test:
    build:
      context: .
      target: testing
      dockerfile: Dockerfile
    container_name: jobspy-unit-test
    volumes:
      - .:/app
      - test-results:/app/test-results
    environment:
      - JOBSPY_TEST_ENV=ci
      - JOBSPY_CACHE_ENABLED=false
      - JOBSPY_MOCK_NETWORK=true
    networks:
      - jobspy-network
    profiles:
      - test
    command: python test_runner.py --unit --coverage
  
  # 整合測試服務
  jobspy-integration-test:
    build:
      context: .
      target: testing
      dockerfile: Dockerfile
    container_name: jobspy-integration-test
    volumes:
      - .:/app
      - test-results:/app/test-results
    environment:
      - JOBSPY_TEST_ENV=integration
      - JOBSPY_CACHE_ENABLED=true
      - JOBSPY_MOCK_NETWORK=false
    networks:
      - jobspy-network
    profiles:
      - test
    command: python test_runner.py --integration
  
  # 效能測試服務
  jobspy-performance-test:
    build:
      context: .
      target: testing
      dockerfile: Dockerfile
    container_name: jobspy-performance-test
    volumes:
      - .:/app
      - test-results:/app/test-results
    environment:
      - JOBSPY_TEST_ENV=performance
      - JOBSPY_CACHE_ENABLED=true
      - JOBSPY_MOCK_NETWORK=false
    networks:
      - jobspy-network
    profiles:
      - test
      - performance
    command: python test_runner.py --performance --report test-results/performance-report.md
  
  # 生產環境
  jobspy-prod:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: jobspy-prod
    environment:
      - JOBSPY_ENV=production
      - JOBSPY_LOG_LEVEL=INFO
      - JOBSPY_CACHE_ENABLED=true
      - JOBSPY_MOCK_NETWORK=false
    networks:
      - jobspy-network
    profiles:
      - prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import jobspy; print('健康檢查通過')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  # Alpine 輕量級生產環境
  jobspy-alpine:
    build:
      context: .
      target: production-alpine
      dockerfile: Dockerfile
    container_name: jobspy-alpine
    environment:
      - JOBSPY_ENV=production
      - JOBSPY_LOG_LEVEL=INFO
      - JOBSPY_CACHE_ENABLED=true
    networks:
      - jobspy-network
    profiles:
      - alpine
      - prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import jobspy"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # 程式碼品質檢查服務
  jobspy-lint:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: jobspy-lint
    volumes:
      - .:/app
    environment:
      - JOBSPY_DEBUG=false
    networks:
      - jobspy-network
    profiles:
      - lint
      - dev
    command: >
      bash -c "
        echo '🔍 執行程式碼品質檢查...' &&
        python test_runner.py --check &&
        echo '✅ 程式碼品質檢查完成'
      "
  
  # 文檔生成服務
  jobspy-docs:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: jobspy-docs
    volumes:
      - .:/app
      - docs-build:/app/docs/_build
    ports:
      - "8080:8000"
    environment:
      - JOBSPY_DEBUG=false
    networks:
      - jobspy-network
    profiles:
      - docs
    command: >
      bash -c "
        echo '📚 生成文檔...' &&
        mkdir -p docs/_build/html &&
        echo '文檔生成完成，啟動 HTTP 伺服器...' &&
        cd docs/_build/html &&
        python -m http.server 8000 --bind 0.0.0.0
      "
  
  # 資料庫服務（如果需要）
  jobspy-db:
    image: postgres:13-alpine
    container_name: jobspy-db
    environment:
      - POSTGRES_DB=jobspy
      - POSTGRES_USER=jobspy
      - POSTGRES_PASSWORD=jobspy_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - jobspy-network
    profiles:
      - db
      - full
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jobspy"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  # Redis 快取服務（如果需要）
  jobspy-redis:
    image: redis:7-alpine
    container_name: jobspy-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - jobspy-network
    profiles:
      - cache
      - full
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes
  
  # 監控服務（Prometheus）
  jobspy-prometheus:
    image: prom/prometheus:latest
    container_name: jobspy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - jobspy-network
    profiles:
      - monitoring
      - full
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
  
  # 監控儀表板（Grafana）
  jobspy-grafana:
    image: grafana/grafana:latest
    container_name: jobspy-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - jobspy-network
    profiles:
      - monitoring
      - full
    restart: unless-stopped
    depends_on:
      - jobspy-prometheus

# ==================== 網路定義 ====================
networks:
  jobspy-network:
    driver: bridge
    name: jobspy-network

# ==================== 卷定義 ====================
volumes:
  # 開發相關
  pip-cache:
    name: jobspy-pip-cache
  jupyter-config:
    name: jobspy-jupyter-config
  
  # 測試相關
  test-results:
    name: jobspy-test-results
  
  # 文檔相關
  docs-build:
    name: jobspy-docs-build
  
  # 資料庫相關
  postgres-data:
    name: jobspy-postgres-data
  redis-data:
    name: jobspy-redis-data
  
  # 監控相關
  prometheus-data:
    name: jobspy-prometheus-data
  grafana-data:
    name: jobspy-grafana-data

# ==================== 使用說明 ====================
#
# 基本命令：
#
# 啟動開發環境：
# docker-compose --profile dev up -d
#
# 執行所有測試：
# docker-compose --profile test up jobspy-test
#
# 執行單元測試：
# docker-compose --profile test up jobspy-unit-test
#
# 執行整合測試：
# docker-compose --profile test up jobspy-integration-test
#
# 執行效能測試：
# docker-compose --profile performance up jobspy-performance-test
#
# 啟動生產環境：
# docker-compose --profile prod up -d
#
# 啟動 Alpine 版本：
# docker-compose --profile alpine up -d
#
# 程式碼品質檢查：
# docker-compose --profile lint up jobspy-lint
#
# 生成文檔：
# docker-compose --profile docs up -d jobspy-docs
#
# 啟動完整環境（包含資料庫和監控）：
# docker-compose --profile full up -d
#
# 進入開發容器：
# docker-compose exec jobspy-dev bash
#
# 查看日誌：
# docker-compose logs -f jobspy-dev
#
# 停止所有服務：
# docker-compose down
#
# 清理所有資料：
# docker-compose down -v --remove-orphans
#
# ==================== 開發工作流程 ====================
#
# 1. 啟動開發環境：
#    docker-compose --profile dev up -d
#
# 2. 進入容器進行開發：
#    docker-compose exec jobspy-dev bash
#
# 3. 執行快速測試：
#    docker-compose exec jobspy-dev python test_runner.py --quick
#
# 4. 執行程式碼檢查：
#    docker-compose --profile lint up jobspy-lint
#
# 5. 執行完整測試：
#    docker-compose --profile test up jobspy-test
#
# 6. 查看測試結果：
#    docker-compose exec jobspy-test cat test-results/test-report.md
#
# ==================== 生產部署 ====================
#
# 1. 建置生產映像：
#    docker-compose build jobspy-prod
#
# 2. 啟動生產環境：
#    docker-compose --profile prod up -d
#
# 3. 檢查健康狀態：
#    docker-compose ps
#
# 4. 查看日誌：
#    docker-compose logs -f jobspy-prod
#
# ==================== 監控和除錯 ====================
#
# 1. 啟動監控服務：
#    docker-compose --profile monitoring up -d
#
# 2. 訪問 Grafana：
#    http://localhost:3000 (admin/admin)
#
# 3. 訪問 Prometheus：
#    http://localhost:9090
#
# 4. 檢查容器狀態：
#    docker-compose ps
#    docker-compose top
#
# 5. 查看資源使用：
#    docker stats
#
# ==================== 環境變數檔案 ====================
#
# 可以創建 .env 檔案來覆蓋預設設定：
#
# # .env
# JOBSPY_DEBUG=true
# JOBSPY_LOG_LEVEL=DEBUG
# POSTGRES_PASSWORD=your_secure_password
# GRAFANA_ADMIN_PASSWORD=your_secure_password
#
# ==================== 擴展配置 ====================
#
# 可以創建 docker-compose.override.yml 來擴展配置：
#
# version: '3.8'
# services:
#   jobspy-dev:
#     volumes:
#       - ./custom-config:/app/config
#     environment:
#       - CUSTOM_SETTING=value
#