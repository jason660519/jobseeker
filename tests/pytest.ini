[tool:pytest]
# pytest 配置檔案

# 基本設定
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --showlocals
    --durations=10
    --cov=jobseeker
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml:coverage.xml
    --cov-fail-under=75
    --maxfail=5

# 測試發現設定
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# 非同步測試設定
asyncio_mode = auto

# 測試標記定義
markers =
    slow: 標記測試為慢速測試 (使用 -m "not slow" 排除)
    fast: 標記測試為快速測試
    integration: 標記為整合測試
    unit: 標記為單元測試
    performance: 標記為效能測試
    network: 標記需要網路連接的測試
    cache: 標記快取相關測試
    async_test: 標記非同步測試
    mock: 標記使用 Mock 的測試
    scraper: 標記爬蟲相關測試
    data_quality: 標記資料品質測試
    error_handling: 標記錯誤處理測試
    monitoring: 標記監控相關測試

# 過濾警告
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:requests.*
    ignore::UserWarning:urllib3.*

# 最小 Python 版本
minversion = 6.0

# 日誌設定
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# 測試超時設定 (需要 pytest-timeout)
# timeout = 300

# 並行測試設定 (需要 pytest-xdist)
# -n auto 會自動決定進程數
# 可以在命令列使用: pytest -n 4

# 覆蓋率設定
[tool:coverage:run]
source = jobseeker
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    setup.py
    conftest.py

[tool:coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[tool:coverage:html]
directory = htmlcov

[tool:coverage:xml]
output = coverage.xml
